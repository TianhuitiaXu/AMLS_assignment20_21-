#import csv
import numpy as np
import pandas as pd

#-------------read data_panda
#name = ['gender', 'smiling']
#data = pd.read_csv('./dataset_AMLS_20-21/celeba/labels.csv',sep='\t',header=0,names = name)
data = pd.read_csv('./dataset_AMLS_20-21/celeba/labels.csv',sep='\t')
y_1=data['gender']
y_2=data['smiling']
for i in range(y_1.shape[0]):
    if y_1[i] == -1:
        y_1[i] = 0
    else:
        y_1[i] = 1 #防止标签出现负数，如果这里负数的话后面计算loss就会出现nan
        
for i in range(y_2.shape[0]):
    if y_2[i] == -1:
        y_2[i] = 0
    else:
        y_2[i] = 1

print(y_1.shape)

from tqdm import tqdm
from keras.preprocessing import image 
#图片读取
train_image = [] 
for i in tqdm(range(data.shape[0])):
    img = image.load_img('./dataset_AMLS_20-21/celeba/img/'+str(i)+'.jpg', color_mode='rgb', target_size=(89,109))
    #img = image.load_img('./dataset_AMLS_20-21/cartoon_set/img/'+str(i)+'.png', target_size=None, grayscale=True)
    #img = img.resize((50,50))
    img = image.img_to_array(img)     
#     img = img/255     
    train_image.append(img) 
X_o = np.array(train_image)

(x_train, y_train), (x_test, y_test) = cifar10.load_data()
y_train = utils.to_categorical(y_train, num_classes)
y_test = utils.to_categorical(y_test, num_classes)
datagen = ImageDataGenerator(
    featurewise_center=True,
    featurewise_std_normalization=True,
    rotation_range=20,
    width_shift_range=0.2,
    height_shift_range=0.2,
    horizontal_flip=True)
# compute quantities required for featurewise normalization
# (std, mean, and principal components if ZCA whitening is applied)
datagen.fit(x_train)
# fits the model on batches with real-time data augmentation:
model.fit(datagen.flow(x_train, y_train, batch_size=32),
          steps_per_epoch=len(x_train) / 32, epochs=epochs)